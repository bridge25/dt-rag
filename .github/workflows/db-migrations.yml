name: Database Migrations

on:
  push:
    paths:
      - "alembic/**"
      - "apps/api/**"
      - "migrations/**"
      - ".github/workflows/db-migrations.yml"
    branches:
      - main
      - master
      - "feature/**"
      - "fix/**"
  pull_request:
    paths:
      - "alembic/**"
      - "apps/api/**"
      - "migrations/**"
      - ".github/workflows/db-migrations.yml"
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_DB: dt_rag_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  test-migrations:
    name: Test PostgreSQL Migrations
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: dt_rag_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres -d dt_rag_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential postgresql-client libpq-dev python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sqlalchemy alembic psycopg2-binary asyncpg pytest pytest-asyncio python-dotenv
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f apps/api/requirements.txt ]; then pip install -r apps/api/requirements.txt; fi

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done

      - name: Setup PostgreSQL extensions
        run: |
          export PGPASSWORD=postgres
          psql -h localhost -p 5432 -U postgres -d dt_rag_test -c "CREATE EXTENSION IF NOT EXISTS vector;"

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/dt_rag_test" >> $GITHUB_ENV

      - name: Run migrations with retry logic
        run: |
          set -e
          
          run_alembic() {
            local cmd="$1"
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts: alembic $cmd"
              if timeout 60 alembic $cmd; then
                echo "Success: alembic $cmd"
                return 0
              else
                echo "Failed: alembic $cmd (attempt $attempt)"
                if [ $attempt -lt $max_attempts ]; then
                  sleep 5
                  export PGPASSWORD=postgres
                  pg_isready -h localhost -p 5432 -U postgres || exit 1
                fi
                attempt=$((attempt + 1))
              fi
            done
            
            echo "All attempts failed for: alembic $cmd"
            return 1
          }
          
          run_alembic "current"
          run_alembic "upgrade head"
          run_alembic "current"

      - name: Verify database state
        run: |
          export PGPASSWORD=postgres
          psql -h localhost -p 5432 -U postgres -d dt_rag_test -c "SELECT tablename FROM pg_tables WHERE schemaname = 'public';"
          psql -h localhost -p 5432 -U postgres -d dt_rag_test -c "SELECT '[1,2,3]'::vector <-> '[4,5,6]'::vector;"

      - name: Run tests
        if: always()
        run: |
          if [ -f test_migration_safety.py ]; then
            python test_migration_safety.py || echo "Migration tests failed (non-critical)"
          fi
          if [ -f tests/test_db_integration.py ]; then
            python -m pytest tests/test_db_integration.py -v || echo "Integration tests failed (non-critical)"
          fi

  test-sqlite-fallback:
    name: Test SQLite Fallback
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sqlalchemy alembic

      - name: Test SQLite migrations
        run: |
          export DATABASE_URL="sqlite:///./test_migration.db"
          alembic upgrade head || echo "SQLite migration failed"
          if [ -f test_migration.db ]; then
            echo "SQLite test passed"
            sqlite3 test_migration.db ".tables"
          fi
          rm -f test_migration.db
