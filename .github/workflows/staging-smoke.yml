name: staging-smoke

on:
  workflow_dispatch:
    inputs:
      api_base:
        description: 'Staging API Base URL'
        required: false
        default: 'http://localhost:8000'
        type: string
      test_timeout:
        description: 'Test timeout in seconds'
        required: false
        default: '300'
        type: string
  push:
    paths: 
      - "dt-rag/scripts/smoke.sh"
      - "dt-rag/docs/bridge/**"
      - "dt-rag/docs/seeds/minimal/**"
      - ".github/workflows/staging-smoke.yml"
    branches:
      - main
      - "dt-rag/**"
  pull_request:
    paths:
      - "dt-rag/scripts/smoke.sh" 
      - "dt-rag/docs/bridge/**"
      - "dt-rag/docs/seeds/minimal/**"
      - ".github/workflows/staging-smoke.yml"

env:
  STAGING_API_BASE: ${{ vars.STAGING_API_BASE || inputs.api_base || 'http://localhost:8000' }}
  API_KEY: ${{ secrets.STAGING_API_KEY }}

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(inputs.test_timeout || '5') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          
      - name: Validate environment
        run: |
          echo "üîç Validating environment variables..."
          echo "STAGING_API_BASE: ${STAGING_API_BASE}"
          echo "API_KEY: ${API_KEY:0:8}..." # Show only first 8 chars for security
          
          if [[ -z "${API_KEY}" ]]; then
            echo "‚ùå ERROR: STAGING_API_KEY secret not configured"
            echo "Please configure repository secret: STAGING_API_KEY"
            exit 1
          fi
          
          if [[ -z "${STAGING_API_BASE}" ]]; then
            echo "‚ùå ERROR: STAGING_API_BASE not configured"
            echo "Please configure repository variable: STAGING_API_BASE"
            exit 1
          fi
          
      - name: Check script permissions
        run: |
          ls -la dt-rag/scripts/smoke.sh
          chmod +x dt-rag/scripts/smoke.sh
          
      - name: Run smoke tests
        id: smoke_test
        run: |
          echo "üöÄ Starting Bridge Pack smoke tests..."
          echo "üìç Target: ${STAGING_API_BASE}"
          
          # Run the smoke test script
          ./dt-rag/scripts/smoke.sh
          
          # Capture exit code
          exit_code=$?
          
          if [ $exit_code -eq 0 ]; then
            echo "smoke_status=success" >> $GITHUB_OUTPUT
            echo "üéâ All smoke tests passed!"
          else
            echo "smoke_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Smoke tests failed with exit code: $exit_code"
            exit $exit_code
          fi
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results-${{ github.run_number }}
          path: |
            dt-rag/scripts/smoke.sh
            dt-rag/docs/bridge/ACCESS_CARD.md
            dt-rag/docs/seeds/minimal/EXPECTED.md
          retention-days: 30
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const smokeStatus = '${{ steps.smoke_test.outputs.smoke_status }}';
            const apiBase = '${{ env.STAGING_API_BASE }}';
            const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            
            const status = smokeStatus === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const emoji = smokeStatus === 'success' ? 'üéâ' : 'üí•';
            
            const comment = `## ${emoji} Bridge Pack Smoke Test Results
            
            **Status**: ${status}
            **API Base**: ${apiBase}
            **Run Details**: [View full results](${runUrl})
            
            ### Test Coverage
            - ‚úÖ Health Check (\`GET /healthz\`)
            - ‚úÖ Taxonomy Tree (\`GET /taxonomy/1.8.1/tree\`)  
            - ‚úÖ Document Classify (\`POST /classify\`)
            - ‚úÖ Document Search (\`POST /search\`)
            
            ${smokeStatus === 'success' 
              ? 'üöÄ **B-team can integrate with confidence!** All endpoints are responding correctly.' 
              : 'üîß **Action Required**: Please check the failing endpoints before integration.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  validate-access-card:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate ACCESS_CARD.md
        run: |
          echo "üîç Validating ACCESS_CARD.md..."
          
          if [[ ! -f "dt-rag/docs/bridge/ACCESS_CARD.md" ]]; then
            echo "‚ùå ACCESS_CARD.md not found"
            exit 1
          fi
          
          # Check for required sections
          required_sections=(
            "BASE URL"
            "SPEC"
            "Health"
            "Auth"
            "How to set env"
          )
          
          for section in "${required_sections[@]}"; do
            if ! grep -q "$section" dt-rag/docs/bridge/ACCESS_CARD.md; then
              echo "‚ùå Missing section: $section"
              exit 1
            fi
          done
          
          echo "‚úÖ ACCESS_CARD.md validation passed"
          
      - name: Validate seed files
        run: |
          echo "üîç Validating seed files..."
          
          seed_files=(
            "dt-rag/docs/seeds/minimal/sample.md"
            "dt-rag/docs/seeds/minimal/sample.html"
            "dt-rag/docs/seeds/minimal/EXPECTED.md"
          )
          
          for file in "${seed_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Seed file not found: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ Seed files validation passed"

  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for secrets in files
        run: |
          echo "üîí Checking for accidentally committed secrets..."
          
          # Check for common secret patterns
          secret_patterns=(
            "api_key.*=.*[a-zA-Z0-9]{20,}"
            "password.*=.*[a-zA-Z0-9]{8,}"
            "token.*=.*[a-zA-Z0-9]{16,}"
            "secret.*=.*[a-zA-Z0-9]{16,}"
          )
          
          for pattern in "${secret_patterns[@]}"; do
            if grep -r -i -E "$pattern" dt-rag/ --include="*.md" --include="*.sh"; then
              echo "‚ùå Potential secret found matching pattern: $pattern"
              echo "Please remove secrets from committed files"
              exit 1
            fi
          done
          
          echo "‚úÖ No secrets found in committed files"