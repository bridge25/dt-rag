[tool:pytest]
# Pytest configuration for RAG evaluation framework tests

# Test discovery
testpaths = tests/evaluation
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version requirements
minversion = 7.0

# Add options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --disable-warnings
    --cov=core
    --cov=orchestrator
    --cov=api
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml

# Markers
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (slower, may use external resources)
    performance: Performance tests (very slow)
    slow: Slow running tests (require --runslow option)
    requires_openai: Tests that require OpenAI API key
    requires_database: Tests that require database connection

# Test timeout (in seconds)
timeout = 300

# Asyncio mode
asyncio_mode = auto

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*pkg_resources.*:ImportWarning
    ignore:.*distutils.*:UserWarning

# Test session configuration
junit_family = xunit2

# Parallel execution
# -n auto to run tests in parallel (requires pytest-xdist)
# Uncomment the next line to enable parallel testing
# addopts = -n auto

# Coverage configuration
[coverage:run]
source = .
omit =
    tests/*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml