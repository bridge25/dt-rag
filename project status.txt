# 🎯 Taxonomy RAG 프로젝트 현황 분석 및 구현 계획

## 📊 현재 프로젝트 상태

### ✅ 완료된 작업

#### 1. 기반 시스템 구축
- PostgreSQL + pgvector 데이터베이스 스키마 설계 완료 (3개 마이그레이션 파일)
- Common-schemas 패키지로 API 계약 통일 (Pydantic 모델)
- 12개 전문 서브에이전트 정의 및 knowledge-base 연결 완료

#### 2. A팀 (Database/API) 부분 구현
- FastAPI 기본 구조 설정 (v2.0.0-rc1)
- `/classify`, `/search`, `/taxonomy` 라우터 스캐폴딩
- 데이터베이스 연결 및 DAO 패턴 구현

#### 3. B팀 (Orchestration) 부분 구현
- LangGraph 7-step 파이프라인 골격 구현 (605라인)
- Intent → Retrieve → Plan → Tools/Debate → Compose → Cite → Respond 단계 정의
- A팀 API와의 연동 코드 포함

#### 4. C팀 (Frontend) 디렉토리 구조
- components 폴더 구조 생성 (agents/, chat/, dashboard/, layout/, pages/, tree/)

### ❌ 미완성 작업

1. **실제 ML 모델 통합** - 키워드 기반이 아닌 실제 분류 모델 필요
2. **Vector Search 구현** - pgvector 인덱스는 있으나 실제 임베딩/검색 로직 없음
3. **HITL 워크플로우** - confidence < 0.7 케이스 처리 미구현
4. **Frontend UI 구현** - 컴포넌트 폴더만 있고 실제 React 코드 없음
5. **에이전트 통합** - 정의된 12개 서브에이전트들이 실제 시스템에 연결 안됨

## 🚀 구현 계획 (서브에이전트 활용)

## Phase 1: Database & Search Foundation (Week 1)

### 1. database-architect + hybrid-search-specialist로 벡터 검색 구현
- pgvector 테이블에 임베딩 컬럼 추가
- OpenAI/Cohere 임베딩 함수 구현
- BM25 + Vector 하이브리드 검색 쿼리 작성
- Cross-encoder reranking 로직 추가

### 2. document-ingestion-specialist로 문서 처리 파이프라인 구축
- PDF, Markdown, HTML 파서 구현
- Chunking 전략 (sliding window, semantic)
- PII 필터링 로직
- 임베딩 생성 및 저장

### 3. taxonomy-architect로 DAG 구조 완성
- 버전 관리 테이블 추가
- 마이그레이션 스크립트 작성
- Rollback 프로시저 구현
- Cycle detection 알고리즘

## Phase 2: Classification & Orchestration (Week 2)

### 4. classification-pipeline-expert로 분류 시스템 구현
- Rule-based 분류기 (키워드, 패턴)
- LLM 기반 분류기 (GPT-4, Claude)
- Confidence scoring 로직
- HITL 큐 관리 시스템

### 5. langgraph-orchestrator로 7-step 파이프라인 완성
- 각 단계별 실제 구현 (현재 스캐폴딩만 있음)
- MCP 도구 통합
- 에러 복구 메커니즘
- 성능 최적화

### 6. api-designer로 REST API 완성
- OpenAPI 스펙 업데이트
- Rate limiting 구현
- API 키 인증 시스템
- Request/Response 검증

## Phase 3: Frontend & Monitoring (Week 3)

### 7. tree-ui-developer로 프론트엔드 구현
- React 트리 컴포넌트 (virtual scrolling)
- 버전 드롭다운 및 diff viewer
- HITL 큐 인터페이스
- 실시간 업데이트 (WebSocket)

### 8. observability-engineer로 모니터링 설정
- Langfuse 통합
- Grafana 대시보드
- SLO/SLI 정의 (p95 ≤ 4s, cost ≤ ₩10/query)
- Alert 규칙 설정

### 9. security-compliance-auditor로 보안 강화
- SQL injection 방어
- Rate limiting 구현
- PII 탐지 및 마스킹
- 감사 로그 시스템

## Phase 4: Evaluation & Deployment (Week 4)

### 10. rag-evaluation-specialist로 품질 평가
- RAGAS 프레임워크 설정
- Golden dataset 생성
- Faithfulness ≥ 0.85 검증
- A/B 테스트 구현

### 11. agent-factory-builder로 에이전트 관리
- 12개 서브에이전트 통합
- 카테고리별 에이전트 매핑
- 동적 에이전트 로딩
- 권한 관리 시스템

### 12. 통합 테스트 및 배포
- E2E 테스트 시나리오
- 성능 벤치마크
- Docker 컨테이너화
- CI/CD 파이프라인 완성

## 📋 즉시 시작 가능한 작업들

### 1. Vector Search 구현 (hybrid-search-specialist)
```python
# apps/api/database.py에 embedding 컬럼 추가
# apps/api/routers/search.py에 하이브리드 검색 구현
```

### 2. Document Ingestion (document-ingestion-specialist)
```python
# apps/ingestion/ 폴더 생성
# 문서 파싱 및 청킹 로직 구현
```

### 3. Frontend Tree Component (tree-ui-developer)
```typescript
# apps/frontend-admin/src/components/tree/에 React 컴포넌트 구현
# Virtual scrolling으로 10,000+ 노드 지원
```

### 4. Classification Pipeline (classification-pipeline-expert)
```python
# apps/orchestration/src/agents/classifier.py 실제 구현
# Confidence scoring 및 HITL 로직 추가
```

## 🎯 서브에이전트 역할 분담

| 서브에이전트 | 주요 담당 영역 | 구현 파일 위치 |
|------------|-------------|--------------|
| database-architect | DB 스키마, 마이그레이션 | `alembic/versions/`, `apps/api/database.py` |
| hybrid-search-specialist | BM25+Vector 검색 | `apps/api/routers/search.py` |
| document-ingestion-specialist | 문서 처리 파이프라인 | `apps/ingestion/` (신규) |
| classification-pipeline-expert | 분류 시스템 | `apps/orchestration/src/agents/classifier.py` |
| langgraph-orchestrator | 7-step 파이프라인 | `apps/orchestration/src/langgraph_pipeline.py` |
| tree-ui-developer | 프론트엔드 UI | `apps/frontend-admin/src/components/tree/` |
| api-designer | REST API 설계 | `apps/api/routers/`, `docs/openapi.yaml` |
| observability-engineer | 모니터링 시스템 | `apps/monitoring/` (신규) |
| security-compliance-auditor | 보안 검증 | `apps/api/security/` (신규) |
| rag-evaluation-specialist | 품질 평가 | `tests/evaluation/` (신규) |
| taxonomy-architect | 택소노미 구조 | `apps/api/taxonomy/` (신규) |
| agent-factory-builder | 에이전트 관리 | `apps/orchestration/src/agents/factory.py` (신규) |

## 📈 성공 지표

### 성능 목표
- **응답 시간**: p95 ≤ 4초
- **처리 비용**: ≤ ₩10/쿼리
- **정확도**: Faithfulness ≥ 0.85
- **가용성**: 99.5% uptime

### 기능 목표
- **택소노미 노드**: 10,000+ 지원
- **동시 사용자**: 100+ 지원
- **HITL 처리**: 15분 이내 응답
- **버전 롤백**: 15분 이내 완료

## 🔄 개발 프로세스

1. **Daily Standup**: 각 서브에이전트 진행상황 공유
2. **Code Review**: PR 기반 리뷰 (2명 이상 승인)
3. **Integration Test**: 매일 저녁 통합 테스트
4. **Performance Test**: 주 2회 성능 벤치마크

## 📞 커뮤니케이션 채널

- **기술 이슈**: GitHub Issues
- **PR 리뷰**: GitHub Pull Requests
- **일일 동기화**: Slack #taxonomy-rag
- **긴급 이슈**: 직접 멘션 또는 전화

---

**시작일**: 2025-09-17
**목표 완료일**: 2025-10-15 (4주)
**프로젝트 리더**: TBD
**기술 스택**: PostgreSQL, pgvector, FastAPI, LangGraph, React, TypeScript