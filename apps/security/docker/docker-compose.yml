version: '3.8'

services:
  # PostgreSQL database for security data
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: dtrag_security
      POSTGRES_USER: dtrag
      POSTGRES_PASSWORD: secure_password_change_in_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - dtrag_security
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dtrag"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass secure_redis_password_change_in_production
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dtrag_security
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Security Framework API
  security-api:
    build:
      context: ../../..
      dockerfile: apps/security/docker/Dockerfile
    environment:
      - SECURITY_LEVEL=production
      - DATABASE_URL=postgresql://dtrag:secure_password_change_in_production@postgres:5432/dtrag_security
      - REDIS_URL=redis://:secure_redis_password_change_in_production@redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-generate-secure-jwt-secret-in-production}
      - ENABLE_MFA=true
      - ENABLE_AUDIT_ENCRYPTION=true
      - ENABLE_CSRF_PROTECTION=true
      - PII_CONFIDENCE_THRESHOLD=0.9
      - RATE_LIMIT_REQUESTS=100
    ports:
      - "8000:8000"
    volumes:
      - audit_logs:/app/audit_logs
      - compliance_data:/app/compliance_data
      - scan_results:/app/scan_results
    networks:
      - dtrag_security
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/security/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - dtrag_security
    depends_on:
      - security-api
    restart: unless-stopped

  # Security monitoring and alerting
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - dtrag_security
    restart: unless-stopped

  # Grafana for security dashboards
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secure_grafana_password_change_in_production
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - dtrag_security
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
      - audit_logs:/app/audit_logs:ro
      - nginx_logs:/var/log/nginx:ro
    ports:
      - "24224:24224"
    networks:
      - dtrag_security
    restart: unless-stopped

  # Vulnerability scanner (scheduled)
  vulnerability-scanner:
    build:
      context: ../../..
      dockerfile: apps/security/docker/Dockerfile
    environment:
      - SECURITY_LEVEL=production
      - DATABASE_URL=postgresql://dtrag:secure_password_change_in_production@postgres:5432/dtrag_security
      - SCAN_MODE=scheduled
      - SCAN_INTERVAL=86400  # 24 hours
    volumes:
      - ../../../:/app/scan_target:ro
      - scan_results:/app/scan_results
    networks:
      - dtrag_security
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "apps.security.scripts.scheduled_scanner"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  audit_logs:
    driver: local
  compliance_data:
    driver: local
  scan_results:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  dtrag_security:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16