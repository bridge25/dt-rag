{"case_id": "case_001", "query_vector": [0.8, 0.6, 0.9, 0.7, 0.5], "response_text": "RAG 시스템 구축을 위해서는 먼저 문서를 벡터화하고, 검색 인덱스를 구성한 후, 검색-생성 파이프라인을 연결해야 합니다.", "metadata": {"case_id": "case_001", "category_path": ["AI", "RAG"], "quality_score": 0.9, "usage_count": 15, "success_rate": 0.85, "created_at": "2025-08-01T10:00:00Z", "last_used_at": "2025-09-04T14:30:00Z"}}
{"case_id": "case_002", "query_vector": [0.7, 0.8, 0.6, 0.9, 0.4], "response_text": "머신러닝 모델 훈련 시에는 데이터 전처리, 특성 선택, 모델 선택, 하이퍼파라미터 튜닝 순서로 진행하는 것이 효과적입니다.", "metadata": {"case_id": "case_002", "category_path": ["AI", "ML"], "quality_score": 0.8, "usage_count": 12, "success_rate": 0.75, "created_at": "2025-08-02T11:00:00Z", "last_used_at": "2025-09-03T16:20:00Z"}}
{"case_id": "case_003", "query_vector": [0.6, 0.5, 0.8, 0.7, 0.9], "response_text": "자연어 처리에서는 토크나이제이션, 임베딩, 어텐션 메커니즘을 통해 문맥을 이해하고 적절한 응답을 생성할 수 있습니다.", "metadata": {"case_id": "case_003", "category_path": ["AI", "NLP"], "quality_score": 0.85, "usage_count": 8, "success_rate": 0.9, "created_at": "2025-08-03T09:30:00Z", "last_used_at": "2025-09-02T13:45:00Z"}}
{"case_id": "case_004", "query_vector": [0.4, 0.7, 0.5, 0.6, 0.8], "response_text": "딥러닝 모델의 성능을 향상시키려면 배치 정규화, 드롭아웃, 학습률 스케줄링 등의 기법을 적용할 수 있습니다.", "metadata": {"case_id": "case_004", "category_path": ["AI", "Deep Learning"], "quality_score": 0.75, "usage_count": 6, "success_rate": 0.8, "created_at": "2025-08-04T14:15:00Z", "last_used_at": "2025-09-01T11:30:00Z"}}
{"case_id": "case_005", "query_vector": [0.9, 0.4, 0.7, 0.8, 0.6], "response_text": "벡터 데이터베이스는 고차원 벡터의 빠른 유사도 검색을 위해 특별히 최적화된 데이터베이스입니다.", "metadata": {"case_id": "case_005", "category_path": ["AI", "RAG", "Vector DB"], "quality_score": 0.95, "usage_count": 20, "success_rate": 0.92, "created_at": "2025-07-28T16:45:00Z", "last_used_at": "2025-09-04T10:15:00Z"}}
