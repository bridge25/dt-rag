{
  "permissions": {
    "allow": [
      "Bash(DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5433/dt_rag_test python -m pytest tests/test_hybrid_search.py -v)",
      "Bash(set DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5433/dt_rag_test)",
      "Bash(pip install:*)",
      "mcp__context7__resolve-library-id",
      "WebSearch",
      "mcp__context7__get-library-docs",
      "Bash(timeout:*)",
      "Bash(set DATABASE_URL=sqlite+aiosqlite:///./dt_rag_test.db)",
      "Bash(docker-compose:*)",
      "Bash(grep:*)",
      "Bash(dir \"C:\\MYCLAUDE_PROJECT\\sonheungmin\\Unmanned\\dt-rag\\apps\")",
      "Bash(cat:*)",
      "Bash(python -m pytest --collect-only --quiet)",
      "Bash(find:*)",
      "Bash(alembic:*)",
      "Bash(python -m pytest --collect-only)",
      "Bash(python -c \"import os; print(''DATABASE_URL:'', os.getenv(''DATABASE_URL'', ''NOT SET''))\")",
      "Bash(python:*)",
      "Read(//c/Users/a/Downloads/**)",
      "Bash(dir:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Read(//c/MYCLAUDE_PROJECT/sonheungmin/Unmanned/**)",
      "Bash(test:*)",
      "Bash(for i in {1..30})",
      "Bash(do docker ps)",
      "Bash(/dev/null)",
      "Bash(break)",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(wmic product:*)",
      "Bash(powershell:*)",
      "Bash(tasklist)",
      "Read(//c/Users/a/AppData/Local/Docker/**)",
      "Read(//c/Users/a/AppData/Roaming/**)",
      "Bash(taskkill:*)",
      "Read(//c/Program Files/**)",
      "Bash(pip index versions:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(docker ps:*)",
      "Bash(set DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/dt_rag)",
      "Bash(docker exec:*)",
      "Bash(findstr:*)",
      "Bash(pip show:*)",
      "Bash(set TEST_PERFORMANCE_SCENARIOS=true)",
      "Bash($env:TEST_PERFORMANCE_SCENARIOS=\"true\")",
      "Bash(for i in {1..3})",
      "Bash(do echo \"=== Run $i ===\")",
      "Bash(tee:*)",
      "Bash(git checkout:*)",
      "Bash(git ls-tree:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(npx create-next-app:*)",
      "Bash(npm audit:*)",
      "Bash(npm install:*)",
      "Bash(npm run lint)",
      "Bash(npm run build:*)",
      "WebFetch(domain:ui.shadcn.com)",
      "Bash(npx shadcn@latest init:*)",
      "Bash(npx shadcn:*)",
      "Bash(ls:*)",
      "Bash(npx tsc:*)",
      "Bash(npx shadcn@latest add:*)",
      "Bash(git log:*)",
      "Bash(gh repo view:*)",
      "Bash(curl -s http://127.0.0.1:8001/health)",
      "Bash(curl -X POST http://127.0.0.1:8001/api/v1/ingestion/upload )",
      "Bash(curl -s http://127.0.0.1:8001/docs)",
      "Bash(curl -s http://127.0.0.1:8001/openapi.json)",
      "Bash(npm run dev:*)",
      "Bash(set PYTHONDONTWRITEBYTECODE=1)",
      "Bash(set GEMINI_API_KEY=AIzaSyBlEJuO9LGLdCJRfhNU6QIKRUQ-Q22Vl7E)",
      "Read(//c/MYCLAUDE_PROJECT/sonheungmin/**)",
      "Bash(netstat:*)",
      "Bash(curl -X POST http://127.0.0.1:8001/answer -H \"Content-Type: application/json\" -H \"X-API-Key: 7geU8-mQTM01zSG5pm6gLpdv4Tg25zbSk8cHm6Um62Y\" -d \"{\"\"q\"\":\"\"What is machine learning?\"\",\"\"mode\"\":\"\"answer\"\",\"\"final_topk\"\":3}\")",
      "Bash(curl -X POST http://127.0.0.1:8001/search -H \"Content-Type: application/json\" -H \"X-API-Key: 7geU8-mQTM01zSG5pm6gLpdv4Tg25zbSk8cHm6Um62Y\" -d \"{\"\"q\"\":\"\"machine learning\"\",\"\"final_topk\"\":3}\")",
      "Bash(psql:*)",
      "Bash(curl:*)",
      "Bash(uvicorn:*)",
      "Bash(for i in {1..10})",
      "Bash(do curl -s http://127.0.0.1:8001/health)",
      "Bash(set PYTHONPATH=%CD%)",
      "Bash(chcp:*)",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(claude --version)",
      "Bash(claude update)",
      "Bash(claude model sonnet-4.5)",
      "WebFetch(domain:github.com)",
      "Bash(moai:*)",
      "Bash(copy /b appsapiroutersclassification_router.py +,,)",
      "Bash(tsc --version)",
      "Bash(mkdir:*)",
      "Read(//mnt/c/MYCLAUDE_PROJECT/sonheungmin/Unmanned/packages/common-schemas/common_schemas/**)",
      "Bash(for file in apps/evaluation/*.py)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(for file in \"apps/api/embedding_service.py\" \"apps/api/routers/embedding_router.py\" \"test_embedding_service.py\" \"simple_embedding_test.py\" \"tests/unit/test_database.py\" \"tests/integration/test_search_system_integration.py\")",
      "Bash(awk:*)",
      "Bash(python3 -m pytest --version)",
      "Bash(python3 -m pip list:*)",
      "Bash(python3 -m pytest --collect-only -q tests/)",
      "Bash(ruff check:*)",
      "Bash(python3 -m ruff check:*)",
      "Bash(python3 -m pytest apps/ tests/ --cov=apps --cov-report=term-missing --cov-report=json -v --tb=no)",
      "Bash(python3 -m pytest tests/e2e/test_complete_workflow.py -v --tb=short)",
      "Bash(DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/dt_rag_test alembic upgrade head)",
      "Bash(python3:*)",
      "Bash(export DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/dt_rag_test)",
      "Bash(docker compose:*)",
      "Bash(docker inspect:*)",
      "Bash(wsl:*)",
      "Bash(docker run:*)",
      "Bash(docker rm:*)",
      "Bash(docker stop:*)",
      "Bash(docker logs:*)",
      "Bash(docker:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(netsh interface portproxy:*)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(if [ -f \"$spec/status.json\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(fi)",
      "Bash(DATABASE_URL=\"postgresql+asyncpg://postgres:postgres@localhost:5432/dt_rag\" python3 ingest_sample_docs.py)",
      "Bash(do echo \"=== Request $i ===\" curl -s -X POST http://127.0.0.1:8000/api/v1/search/ -H \"Content-Type: application/json\" -H \"X-API-Key: 7geU8-mQTM01zSG5pm6gLpdv4Tg25zbSk8cHm6Um62Y\" -d '{\"\"\"\"q\"\"\"\":\"\"\"\"test\"\"\"\",\"\"\"\"final_topk\"\"\"\":1}' -i)",
      "Bash(do echo \"=== Request $i ===\")",
      "Bash(do docker ps --filter \"name=dt_rag_api\" --format \"{{.Status}}\")",
      "Bash(do docker ps --filter \"name=dt_rag_frontend\" --format \"{{.Status}}\")",
      "Bash(do curl -s -H \"X-API-Key: invalid_key_attempt_$i\" http://localhost:8000/api/v1/search/ -X POST -d '{\"\"\"\"q\"\"\"\":\"\"\"\"test\"\"\"\",\"\"\"\"final_topk\"\"\"\":1}')",
      "Bash(chmod:*)",
      "Bash(ENVIRONMENT=development docker-compose up -d dt_rag_api)",
      "Bash(bash:*)",
      "Bash(do sleep:*)",
      "SlashCommand(/alfred:9-update)",
      "Read(//home/a/.npm-global/lib/node_modules/moai-adk/templates/**)",
      "Bash(do echo \"=== SPEC-$spec-001 ===\")",
      "Read(//mnt/c/MYCLAUDE_PROJECT/sonheungmin/Unmanned/**)",
      "SlashCommand(/alfred:1-spec \"Feature Flag 시스템 강화 및 CaseBank Vector 활성화\")",
      "Bash(__NEW_LINE__ git checkout -b feature/SPEC-FOUNDATION-001)",
      "Bash(__NEW_LINE__ git add .moai/specs/SPEC-FOUNDATION-001/spec.md .moai/specs/SPEC-FOUNDATION-001/plan.md .moai/specs/SPEC-FOUNDATION-001/acceptance.md)",
      "Bash(__NEW_LINE__ git log --oneline -1)",
      "Bash(__NEW_LINE__ git show HEAD --stat)",
      "SlashCommand(/alfred:2-build:*)",
      "Bash(pytest:*)",
      "SlashCommand(/alfred:3-sync:*)"
    ],
    "deny": [],
    "ask": []
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "cmd /c \"set PYTHONIOENCODING=utf-8 && C:\\Users\\a\\AppData\\Local\\Programs\\Python\\Python313\\python.exe .claude/hooks/knowledge_injector.py\"",
            "timeout": 10
          }
        ]
      }
    ]
  },
  "outputStyle": "Explanatory"
}
