# =============================================================================
# Dynamic Taxonomy RAG v1.8.1 - Environment Configuration
# =============================================================================
# 이 파일은 DT-RAG 시스템이 동작하는데 필요한 모든 환경 변수를 포함합니다.
# 실제 배포 시 .env 파일로 복사하고 실제 값으로 변경하세요.
# =============================================================================

# =============================================================================
# 🌍 ENVIRONMENT CONFIGURATION
# =============================================================================
# 환경 설정 (development, staging, production, testing)
DT_RAG_ENV=development

# 디버그 모드 (production에서는 반드시 false로 설정)
DEBUG=true

# =============================================================================
# 🗄️ DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL 데이터베이스 URL (pgvector extension 포함)
# 형식: postgresql://username:password@host:port/database_name
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/dt_rag

# 테스트용 데이터베이스 URL
TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/dt_rag_test

# 데이터베이스 연결 풀 설정
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
DB_ECHO=false

# =============================================================================
# 🔒 SECURITY & AUTHENTICATION
# =============================================================================
# JWT Secret Key (CRITICAL - 프로덕션에서는 반드시 강력한 키 사용)
# 생성 방법: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-super-secret-jwt-key-change-in-production-32chars-minimum

# JWT 설정
JWT_EXPIRATION_MINUTES=30
JWT_REFRESH_EXPIRATION_DAYS=7

# 비밀번호 정책
PASSWORD_MIN_LENGTH=8
PASSWORD_REQUIRE_SPECIAL=true

# =============================================================================
# 🔄 REDIS CONFIGURATION
# =============================================================================
# Redis URL (캐싱 및 레이트 리미팅용)
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# 🌐 CORS CONFIGURATION
# =============================================================================
# CORS 허용 도메인 (쉼표로 구분, production에서는 반드시 구체적인 도메인 지정)
# Development
CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:8080,http://localhost:8081,http://127.0.0.1:3000

# Staging
# CORS_ORIGINS=https://staging.dt-rag.com,https://staging-app.dt-rag.com

# Production
# CORS_ORIGINS=https://dt-rag.com,https://app.dt-rag.com

# CORS 설정
CORS_CREDENTIALS=true
CORS_HEADERS=Accept,Accept-Language,Content-Language,Content-Type,Authorization,X-API-Key,X-Requested-With,X-Request-ID,Cache-Control

# =============================================================================
# 🤖 LLM API KEYS
# =============================================================================
# OpenAI API Key (GPT-4, 임베딩 생성용)
OPENAI_API_KEY=sk-your-openai-api-key-here

# 기타 LLM API Keys (필요에 따라 추가)
# ANTHROPIC_API_KEY=your-anthropic-api-key
# COHERE_API_KEY=your-cohere-api-key
# HUGGINGFACE_API_KEY=your-huggingface-api-key

# =============================================================================
# 🏗️ A팀 API CONFIGURATION
# =============================================================================
# A팀 서비스 API 설정
A_TEAM_BASE_URL=http://localhost:8001
A_TEAM_URL=http://localhost:8001
ORCH_A_TEAM_BASE_URL=http://localhost:8001

# A팀 API 인증 (필요한 경우)
# A_TEAM_API_KEY=your-a-team-api-key

# =============================================================================
# 🔧 MCP SERVER CONFIGURATION
# =============================================================================
# MCP (Model Context Protocol) 서버 설정
MCP_SERVER_URL=http://localhost:8080

# MCP 서버 인증 (필요한 경우)
# MCP_SERVER_TOKEN=your-mcp-server-token

# =============================================================================
# 📊 MONITORING & OBSERVABILITY
# =============================================================================
# 모니터링 활성화
MONITORING_ENABLED=true

# 로그 레벨 (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# 트레이싱 샘플링 비율 (0.0 ~ 1.0)
TRACE_SAMPLING_RATE=0.1

# Prometheus 메트릭 설정
PROMETHEUS_PORT=8001
METRICS_ENDPOINT=/metrics

# =============================================================================
# 📈 LANGFUSE CONFIGURATION
# =============================================================================
# Langfuse 관찰성 플랫폼 설정
LANGFUSE_PUBLIC_KEY=pk-lf-your-public-key-here
LANGFUSE_SECRET_KEY=sk-lf-your-secret-key-here
LANGFUSE_HOST=https://cloud.langfuse.com

# Langfuse 추가 설정
# LANGFUSE_DEBUG=false
# LANGFUSE_TIMEOUT=30

# =============================================================================
# ⚡ PERFORMANCE & SCALING
# =============================================================================
# 워커 프로세스 수 (CPU 코어 수에 맞게 조정)
WORKER_PROCESSES=1

# 워커 연결 수
WORKER_CONNECTIONS=1000

# 최대 요청 수
MAX_REQUESTS=1000
MAX_REQUESTS_JITTER=100

# 타임아웃 설정 (초)
KEEPALIVE_TIMEOUT=65
TIMEOUT_KEEP_ALIVE=5
TIMEOUT_GRACEFUL_SHUTDOWN=30

# =============================================================================
# 🛡️ RATE LIMITING
# =============================================================================
# 기본 레이트 리미팅 설정
DEFAULT_RATE_LIMIT=100/minute
BURST_RATE_LIMIT=200/minute
AUTH_RATE_LIMIT=5/minute
SEARCH_RATE_LIMIT=50/minute
CLASSIFICATION_RATE_LIMIT=30/minute
PIPELINE_RATE_LIMIT=10/minute
ADMIN_RATE_LIMIT=1000/minute

# =============================================================================
# 🔍 SEARCH & VECTOR CONFIGURATION
# =============================================================================
# 벡터 임베딩 설정
EMBEDDING_MODEL=text-embedding-3-small
EMBEDDING_DIMENSIONS=1536

# 검색 설정
DEFAULT_SEARCH_LIMIT=10
MAX_SEARCH_LIMIT=100

# 하이브리드 검색 가중치
BM25_WEIGHT=0.3
VECTOR_WEIGHT=0.7

# =============================================================================
# 📄 DOCUMENT PROCESSING
# =============================================================================
# 문서 처리 설정
MAX_FILE_SIZE_MB=50
SUPPORTED_FILE_TYPES=pdf,txt,docx,md,html

# 청킹 설정
CHUNK_SIZE=1000
CHUNK_OVERLAP=100

# PII 필터링 설정
PII_FILTER_MODE=strict
PII_DETECTION_THRESHOLD=0.8

# =============================================================================
# 🔐 API KEYS & TOKENS
# =============================================================================
# API 키 검증 설정
API_KEY_HEADER=X-API-Key
API_KEY_PREFIX=dtrag_

# 시스템 토큰 (내부 서비스 간 통신용)
SYSTEM_TOKEN=your-internal-system-token-here

# 웹훅 시크릿 (외부 서비스 연동용)
WEBHOOK_SECRET=your-webhook-secret-here

# =============================================================================
# 💾 STORAGE CONFIGURATION
# =============================================================================
# 파일 저장소 설정
STORAGE_TYPE=local
STORAGE_PATH=./storage

# S3 설정 (STORAGE_TYPE=s3인 경우)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_REGION=us-east-1
# S3_BUCKET_NAME=dt-rag-storage

# =============================================================================
# 🧪 TESTING CONFIGURATION
# =============================================================================
# 테스트 환경 설정
TEST_MODE=false
TEST_DATABASE_RESET=true
TEST_DATA_CLEANUP=true

# 테스트용 더미 데이터
GENERATE_TEST_DATA=false
TEST_DOCUMENTS_COUNT=100

# =============================================================================
# 🔄 BACKUP & MAINTENANCE
# =============================================================================
# 백업 설정
BACKUP_ENABLED=false
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30

# 유지보수 모드
MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE=시스템 점검 중입니다.

# =============================================================================
# 📧 NOTIFICATION CONFIGURATION
# =============================================================================
# 이메일 알림 설정
EMAIL_ENABLED=false
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@example.com
SMTP_PASSWORD=your-email-password
SMTP_FROM_EMAIL=noreply@dt-rag.com

# Slack 알림 설정
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# =============================================================================
# 🌟 FEATURE FLAGS
# =============================================================================
# 기능 활성화 플래그
ENABLE_SWAGGER_UI=true
ENABLE_REDOC=true
ENABLE_METRICS=true
ENABLE_RATE_LIMITING=true
ENABLE_REQUEST_LOGGING=true
ENABLE_ERROR_TRACKING=true

# 실험적 기능
ENABLE_EXPERIMENTAL_FEATURES=false
ENABLE_BETA_CLASSIFICATION=false
ENABLE_ADVANCED_SEARCH=false

# =============================================================================
# 🔧 ADVANCED CONFIGURATION
# =============================================================================
# 고급 설정
ENABLE_SQL_LOGGING=false
ENABLE_QUERY_OPTIMIZATION=true
ENABLE_CONNECTION_POOLING=true

# 캐시 설정
CACHE_TTL_SECONDS=3600
CACHE_MAX_SIZE=1000

# 세션 설정
SESSION_TIMEOUT_MINUTES=60
SESSION_CLEANUP_INTERVAL=300

# =============================================================================
# 🏥 HEALTH CHECK CONFIGURATION
# =============================================================================
# 헬스체크 설정
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=5
HEALTH_CHECK_RETRIES=3

# 의존성 서비스 헬스체크
CHECK_DATABASE_HEALTH=true
CHECK_REDIS_HEALTH=true
CHECK_EXTERNAL_APIS=true

# =============================================================================
# 📝 ENVIRONMENT-SPECIFIC NOTES
# =============================================================================
#
# 🔥 PRODUCTION 환경 필수 변경사항:
# 1. SECRET_KEY: 강력한 랜덤 키로 변경 (32자 이상)
# 2. DATABASE_URL: 실제 프로덕션 DB 정보로 변경
# 3. CORS_ORIGINS: 실제 프론트엔드 도메인만 허용
# 4. DEBUG: false로 설정
# 5. DT_RAG_ENV: production으로 설정
# 6. LOG_LEVEL: WARNING 또는 ERROR로 설정
# 7. 모든 API 키를 실제 값으로 교체
#
# 🧪 TESTING 환경 설정:
# - DT_RAG_ENV=testing
# - TEST_MODE=true
# - MONITORING_ENABLED=false
# - 테스트용 독립 데이터베이스 사용
#
# 🏗️ STAGING 환경 설정:
# - DT_RAG_ENV=staging
# - DEBUG=false
# - 프로덕션과 유사한 설정 사용
# - 스테이징 전용 도메인 설정
#
# 🛡️ 보안 고려사항:
# - 이 파일을 .gitignore에 추가하여 Git에 커밋되지 않도록 주의
# - 모든 시크릿 키는 안전한 방식으로 관리
# - production 환경에서는 환경변수 직접 설정 권장
# - 정기적으로 API 키 로테이션 실시
#
# =============================================================================